// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsInvalidParam(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_PARAM.String() && e.Code == 400
}

func ErrorInvalidParam(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_PARAM.String(), fmt.Sprintf(format, args...))
}

func IsNeedLogin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NEED_LOGIN.String() && e.Code == 401
}

func ErrorNeedLogin(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_NEED_LOGIN.String(), fmt.Sprintf(format, args...))
}

func IsPaymentRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PAYMENT_REQUIRED.String() && e.Code == 402
}

func ErrorPaymentRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(402, ErrorReason_PAYMENT_REQUIRED.String(), fmt.Sprintf(format, args...))
}

func IsForbiddenRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FORBIDDEN_REQUEST.String() && e.Code == 403
}

func ErrorForbiddenRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_FORBIDDEN_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsInternal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL.String() && e.Code == 500
}

func ErrorInternal(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL.String(), fmt.Sprintf(format, args...))
}

func IsExternal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EXTERNAL.String() && e.Code == 500
}

func ErrorExternal(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_EXTERNAL.String(), fmt.Sprintf(format, args...))
}
