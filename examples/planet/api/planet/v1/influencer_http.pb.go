// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.12
// source: examples/planet/api/planet/v1/influencer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInfluencerListInfluencer = "/examples.planet.api.influencer.v1.Influencer/ListInfluencer"

type InfluencerHTTPServer interface {
	ListInfluencer(context.Context, *ListInfluencerRequest) (*ListInfluencerReply, error)
}

func RegisterInfluencerHTTPServer(s *http.Server, srv InfluencerHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/influencers", _Influencer_ListInfluencer0_HTTP_Handler(srv))
}

func _Influencer_ListInfluencer0_HTTP_Handler(srv InfluencerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInfluencerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInfluencerListInfluencer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInfluencer(ctx, req.(*ListInfluencerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInfluencerReply)
		return ctx.Result(200, reply)
	}
}

type InfluencerHTTPClient interface {
	ListInfluencer(ctx context.Context, req *ListInfluencerRequest, opts ...http.CallOption) (rsp *ListInfluencerReply, err error)
}

type InfluencerHTTPClientImpl struct {
	cc *http.Client
}

func NewInfluencerHTTPClient(client *http.Client) InfluencerHTTPClient {
	return &InfluencerHTTPClientImpl{client}
}

func (c *InfluencerHTTPClientImpl) ListInfluencer(ctx context.Context, in *ListInfluencerRequest, opts ...http.CallOption) (*ListInfluencerReply, error) {
	var out ListInfluencerReply
	pattern := "/v1/influencers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInfluencerListInfluencer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
